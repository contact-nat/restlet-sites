#By default, the Web servers does not listen any port
#web.server.port:

#Name of the logger used for access logs
#web.server.access.logs.logger.name: com.noelios.web.WebComponent.www

#Lookup the "X-Forwarded-For" header supported by popular proxies and caches and uses it to retrieve the client IP.
#This information is only safe for intermediary components within your local network. Other addresses
#could easily be changed by setting a fake header and should not be trusted for serious security checks.
#useForwardedForHeader: true

#Thread pool minimum threads
#threadPool.minThreads: 8

#Thread pool max threads
#threadPool.maxThreads: 200

#Thread pool threads priority ranging from 1 (low) to 10 (high)
#threadPool.threadsPriority: 5

#Thread pool idle timeout in milliseconds; threads that are idle for longer than this period may be stopped
#threadPool.idleTimeout	int	60000

#Thread pool stop timeout in milliseconds; the maximum time allowed for the service to shutdown
#threadPool.stopTimeout: 5000

#Connector acceptor thread count; when -1, Jetty will default to Runtime.availableProcessors() / 2, with a minimum of 1
#connector.acceptors: -1

#Connector selector thread count; when -1, Jetty will default to Runtime.availableProcessors()
#connector.selectors: -1

#Connector accept queue size; also known as accept backlog
#connector.acceptQueueSize: 0

#Connector idle timeout in milliseconds; this value is interpreted as the maximum time between
#some progress being made on the connection; so if a single byte is read or written, then the
#timeout is reset
#connector.idleTimeout: 30000

#Connector TCP/IP SO linger time in milliseconds; when -1 is disabled
#connector.soLingerTime: -1

#Connector stop timeout in milliseconds; the maximum time allowed for the service to shutdown
#connector.stopTimeout: 30000

#HTTP header cache size in bytes
#http.headerCacheSize: 512

#HTTP request header size in bytes; larger headers will allow for more and/or larger cookies plus
#larger form content encoded in a URL; however, larger headers consume more memory and can make a
#server more vulnerable to denial of service attacks
#http.requestHeaderSize: 8*1024

#HTTP response header size in bytes; larger headers will allow for more and/or larger cookies and
#longer HTTP headers (e.g. for redirection); however, larger headers will also consume more memory
#http.responseHeaderSize	int	8*1024

#HTTP output buffer size in bytes; a larger buffer can improve performance by allowing a content
#producer to run without blocking, however larger buffers consume more memory and may induce some
#latency before a client starts processing the content
#http.outputBufferSize: 32*1024

#Low resource monitor period in milliseconds; when 0, low resource monitoring is disabled
#lowResource.period: 1000

#Low resource monitor, whether to check if we're low on threads
#lowResource.threads: true

#Low resource monitor max memory in bytes; when 0, the check disabled; memory used is calculated
#as (totalMemory-freeMemory)
#lowResource.maxMemory: 0

#Low resource monitor max connections; when 0, the check is disabled
#lowResource.maxConnections: 0

#Low resource monitor idle timeout in milliseconds; applied to EndPoints when in the low resources state
#lowResource.idleTimeout: 1000

#Low resource monitor stop timeout in milliseconds; the maximum time allowed for the service to shutdown
#lowResource.stopTimeout: 30000
