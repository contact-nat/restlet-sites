<?xml version="1.0"?>

<!-- ==============================================
Web build file  -  Copyright 2005-2014 Restlet
============================================== -->

<project name="Web" default="rebuild">
  <import file="${forge-home}/forge-tools.xml" optional="true" />
  <tstamp>
    <format property="build.date" pattern="yyyyMMdd-HHmm" />
  </tstamp>

  <!-- Set global names -->
  <property file="custom.properties" />
  <property file="rf-version.properties" />
  <property file="build.properties" />
  <property name="author" value="Jerome Louvel" />

  <!-- Set global paths -->
  <property name="temp" location="temp" />
  <property name="tools" location="tools" />
  <property name="javadocs" value="${temp}/javadocs" />
  <property name="classes" value="${temp}/classes" />
  <property name="bin" location="bin" />
  <property name="config" value="${bin}/config" />
  <property name="dist" location="dist" />
  <property name="dist-path" value="web-${version-compact}" />
  <property name="tmpl" location="tmpl" />
  <property name="data" location="prod/data" />
  <property name="docs" location="docs" />
  <property name="src" location="../modules/com.restlet.frontend/src" />
  <property name="lib" location="../librairies" />
  <property name="mods" location="../modules" />

  <property name="www" value="www" />
  <property name="restlet-com" value="${www}/restlet-com" />

  <!-- Create the time stamp -->
  <tstamp />
  <!-- Set the property that will enable the Javadoc target -->
  <condition property="do-javadoc">
    <istrue value="${javadoc}" />
  </condition>
  <!-- Set the property that will enable the Package target -->
  <condition property="do-package">
    <istrue value="${package}" />
  </condition>
  <!-- Set the property that will enable the Integrate target -->
  <condition property="do-integrate">
    <istrue value="${integrate}" />
  </condition>
  <!-- Set the property that will enable the client-snapshot target -->
  <condition property="do-client-snapshot">
    <istrue value="${client-snapshot}" />
  </condition>
  <!-- Set the property that will enable the client-release target -->
  <condition property="do-client-release">
    <istrue value="${client-release}" />
  </condition>

  <property file="${tmpl}/config/config.${envt}.properties" />

  <!-- Current year -->
  <tstamp>
    <format property="current-year" pattern="yyyy" />
  </tstamp>

  <path id="main.path">
    <fileset dir="${lib}" includes="**/*.jar" />
  </path>

  <path id="fmpp.path">
    <pathelement location="tools/fmpp/bsh.jar" />
    <pathelement location="tools/fmpp/fmpp.jar" />
    <pathelement location="tools/fmpp/freemarker.jar" />
    <pathelement location="tools/fmpp/oro.jar" />
    <pathelement location="tools/fmpp/resolver.jar" />
  </path>

  <!-- =================== -->
  <!-- ===  Ant Tasks  === -->
  <!-- =================== -->
  <!-- FMPP (FreeMarker-based text file PreProcessor) -->
  <taskdef name="fmpp" classname="fmpp.tools.AntTask" classpathref="fmpp.path" />

  <!-- ==================== -->
  <!-- ===  Ant Macros  === -->
  <!-- ==================== -->
  <macrodef name="generate-guide" description="Generate the source code for a specific user guide version.">
    <attribute name="version" />
    <sequential>
      <!-- deal with the "guide" links -->
      <replaceregexp match="guide://" replace="/technical-resources/restlet-framework/guide/@{version}" flags="g">
        <fileset dir="${temp}/owr/tech-doc/restlet-framework/guide/@{version}" includes="**/*" />
      </replaceregexp>
      <!-- deal with the "javadocs" links -->
      <replaceregexp match="javadocs://(.\..)/(.*)" replace="/technical-resources/restlet-framework/javadocs/\1/\2" byline="true">
        <fileset dir="${temp}/owr/tech-doc/restlet-framework/guide/@{version}" includes="**/*" />
      </replaceregexp>
      <replaceregexp match="javadocs://(.*)" replace="/technical-resources/restlet-framework/javadocs/@{version}/\1" byline="true">
        <fileset dir="${temp}/owr/tech-doc/restlet-framework/guide/@{version}" includes="**/*" />
      </replaceregexp>
      <!-- deal with the "source" links -->
      <replaceregexp match="github://(.\..)/(.*)" replace="https://github.com/restlet/restlet-framework-java/tree/\1/modules/\2" byline="true">
        <fileset dir="${temp}/owr/tech-doc/restlet-framework/guide/@{version}" includes="**/*" />
      </replaceregexp>
      <!-- deal with the "source" links -->
      <replaceregexp match="github://(.*)" replace="https://github.com/restlet/restlet-framework-java/tree/@{version}/modules/\1" byline="true">
        <fileset dir="${temp}/owr/tech-doc/restlet-framework/guide/@{version}" includes="**/*" />
      </replaceregexp>
      <replaceregexp match="\$\{restlet-version-minor\}" replace="@{version}" byline="true">
        <fileset dir="${temp}/owr/tech-doc/restlet-framework/guide/@{version}" includes="**/*" />
      </replaceregexp>
      <!-- Add the last update date to the guide -->
      <exec executable="git" outputproperty="git.revision.date">
        <arg value="log" />
        <arg value="-n1" />
        <arg value="--date=rfc" />
        <arg value="--format=Last update: %ad" />
        <arg value="${mods}/com.restlet/tech-doc/restlet-framework/guide/@{version}" />
      </exec>
      <echo file="${temp}/owr/tech-doc/restlet-framework/guide/@{version}/index.md" append="true">${git.revision.date}</echo>
    </sequential>
  </macrodef>


  <macrodef name="generate-guide-pdf" description="Generate the source code for a specific user guide version.">
    <attribute name="version" />
    <sequential>
      <!-- deal with the "guide" links -->
      <replaceregexp match="guide://" replace="/technical-resources/restlet-framework/guide/@{version}" byline="true">
        <fileset dir="${temp}/owr/tech-doc/restlet-framework/guide/@{version}" includes="**/*" />
      </replaceregexp>
      <!-- deal with the "javadocs" links -->
      <replaceregexp match="javadocs://(.\..)/(.*)" replace="/technical-resources/restlet-framework/javadocs/\1/\2" byline="true">
        <fileset dir="${temp}/owr/tech-doc/restlet-framework/guide/@{version}" includes="**/*" />
      </replaceregexp>
      <replaceregexp match="javadocs://(.*)" replace="/technical-resources/restlet-framework/javadocs/@{version}/\1" byline="true">
        <fileset dir="${temp}/owr/tech-doc/restlet-framework/guide/@{version}" includes="**/*" />
      </replaceregexp>
      <!-- deal with the "source" links -->
      <replaceregexp match="github://(.\..)/(.*)" replace="https://github.com/restlet/restlet-framework-java/tree/\1/modules/\2" byline="true">
        <fileset dir="${temp}/owr/tech-doc/restlet-framework/guide/@{version}" includes="**/*" />
      </replaceregexp>
      <!-- deal with the "source" links -->
      <replaceregexp match="github://(.*)" replace="https://github.com/restlet/restlet-framework-java/tree/@{version}/modules/\1" byline="true">
        <fileset dir="${temp}/owr/tech-doc/restlet-framework/guide/@{version}" includes="**/*" />
      </replaceregexp>
      <!-- Add the last update date to the guide -->
      <exec executable="git" outputproperty="git.revision.date">
        <arg value="log" />
        <arg value="-n1" />
        <arg value="--date=rfc" />
        <arg value="--format=Last update: %ad" />
        <arg value="${mods}/com.restlet/tech-doc/restlet-framework/guide/@{version}" />
      </exec>
      <echo file="${temp}/owr/tech-doc/restlet-framework/guide/@{version}/index.md" append="true">${git.revision.date}</echo>
    </sequential>
  </macrodef>


  <macrodef name="generate-tutorial" description="Generate the source code for a specific tutorial version.">
    <attribute name="version" />
    <sequential>
      <!-- generate version related properties -->
      <ant antfile="${tmpl}/config/generate-config.xml" target="generate-config" inheritAll="false">
        <property name="restlet.version" value="@{version}" />
        <property name="tmpl" value="${tmpl}" />
        <property name="temp" value="${temp}" />
        <property name="file.model" value="${temp}/model.tutorial.@{version}.properties" />
      </ant>
      <!-- parse the files according to this version properties -->
      <replace dir="${temp}/owr/tech-doc/restlet-framework/tutorial/@{version}" replacefilterfile="${temp}/model.tutorial.@{version}.properties" />

      <mkdir dir="${temp}/toc" />
      <exec executable="sh" osfamily="unix">
        <arg value="${tools}/get-title.sh" />
        <arg value="${temp}/owr/tech-doc/restlet-framework/tutorial/@{version}/index.md" />
        <arg value="${temp}/toc/toc.tutorial.@{version}.properties" />
      </exec>

      <!-- shift templates according to the current version -->
      <copy file="${tmpl}/md/tutorial.tmpl" tofile="${temp}/toc/tutorial.@{version}.tmpl">
        <filterchain>
          <replacestring from="@version@" to="@{version}" />
        </filterchain>
      </copy>
      <!-- cope with marked down files and add decoration -->
      <exec executable="sh" osfamily="unix">
        <arg value="${tmpl}/md/unixtohtml.sh" />
        <arg value="${temp}/owr/tech-doc/restlet-framework/tutorial/@{version}" />
        <arg value="${temp}/toc/tutorial.@{version}.tmpl" />
      </exec>
      <!-- complete properties with this version''s set of properties, before we cope with the wwhole page decoration -->
      <concat append="true" destfile="${temp}/toc/toc.properties">
        <filelist files="${temp}/toc/toc.tutorial.@{version}.properties" />
      </concat>
    </sequential>
  </macrodef>

  <macrodef name="generate-file" description="Generate the source code for a specific file.">
    <attribute name="source" />
    <attribute name="target" />
    <attribute name="raw" />
    <sequential>
      <!-- cope with marked down file and add decoration -->
      <exec executable="sh" osfamily="unix">
        <arg value="${tmpl}/md/unixtohtml.sh" />
        <arg value="${temp}/owr/@{source}" />
        <arg value="${temp}/owr/@{target}" />
        <arg value="${tmpl}/md/singlefile-@{raw}.tmpl" />
      </exec>
    </sequential>
  </macrodef>

  <!-- ===================== -->
  <!-- ===  Ant Targets  === -->
  <!-- ===================== -->

  <!-- GENERAL targets -->
  <target name="build" depends="generate, verify, integrate, stage, package" description="Full build." />
  <target name="rebuild" depends="clean, generate, verify, integrate, stage, package" description="Full build from scratch." />

  <!-- CLEAN target -->
  <target name="clean" depends="clean-temp, clean-dist" description="Clean the staging area." />

  <!-- CLEAN-DIST target -->
  <target name="clean-dist" description="Clean distributions files.">
    <delete includeEmptyDirs="true" verbose="false" quiet="false" failonerror="false">
      <fileset dir="${dist}">
        <include name="*/${dist-path}/**/*" />
        <include name="*/${dist-path}" />
      </fileset>
    </delete>

    <delete includeEmptyDirs="true" verbose="false" quiet="false" failonerror="false">
      <fileset dir="${dist}" />
    </delete>
  </target>

  <!-- CLEAN-TEMP target -->
  <target name="clean-temp" description="Clean temporary build files.">
    <!-- Delete the classes and Javadoc directories -->
    <delete includeEmptyDirs="true" verbose="false" quiet="false" failonerror="false">
      <fileset dir="${temp}" />
    </delete>
  </target>

  <!-- GENERATE target -->
  <target name="generate" depends="generate-classes, generate-templates, generate-javadocs" description="Generate files." />

  <target name="generate-classes" description="Compile the source files.">
    <!-- Create the classes directory used by compiler -->
    <mkdir dir="${classes}" />

    <!-- Compiles source files -->
    <javac compiler="javac1.6" debug="true" srcdir="${src}" destdir="${classes}" classpathref="main.path" />
  </target>

  <target name="generate-templates" description="Generate template-based files.">
    <!-- generate static files for the site : restlet.com, user guide generated with pandoc -->
    <delete dir="${temp}/owr" />
    <mkdir dir="${temp}/owr" />
    <copy todir="${temp}/owr">
      <fileset dir="../modules/com.restlet/" />
    </copy>

    <!-- Add the last update date to the guides -->
    <exec executable="git" outputproperty="apispark.guide.revision.date">
      <arg value="log" />
      <arg value="-n1" />
      <arg value="--date=rfc" />
      <arg value="--format=Last update: %ad" />
      <arg value="${mods}/com.restlet/tech-doc/apispark/guide" />
    </exec>
    <echo file="${temp}/owr/tech-doc/apispark/guide/index.md" append="true">${apispark.guide.revision.date}</echo>
    <exec executable="git" outputproperty="studio.guide.revision.date">
      <arg value="log" />
      <arg value="-n1" />
      <arg value="--date=rfc" />
      <arg value="--format=Last update: %ad" />
      <arg value="${mods}/com.restlet/tech-doc/restlet-studio/guide" />
    </exec>
    <echo file="${temp}/owr/tech-doc/restlet-studio/guide/index.md" append="true">${studio.guide.revision.date}</echo>
    <generate-guide version="2.2" />
    <generate-guide version="2.3" />
    <replaceregexp match="javadocs://(.\..)/(.*)" replace="/technical-resources/restlet-framework/javadocs/\1/\2" byline="true">
      <fileset dir="${temp}/owr" includes="**/*" />
    </replaceregexp>
    <replaceregexp match="javadocs://(.*)" replace="/technical-resources/restlet-framework/javadocs/${stable.restlet-version-minor}/\1" byline="true">
      <fileset dir="${temp}/owr" includes="**/*" />
    </replaceregexp>


    <fmpp sourceRoot="${temp}/owr" outputRoot="${temp}/${restlet-com}" modes="ignore(**/.svn,**/Thumbs.db)" quiet="reallyQuiet">
      <data expandProperties="yes">
        labels:xml(labels.xml)
        hierarchy:xml(hierarchy.xml)
        restletDistributions: text(data/distributions.json)
        restletVersions: text(data/versions.json)
        restletQualifiers: text(data/qualifiers.json)
        restletEditions: text(data/editions.json)
        restletContributors: slicedText(data/contributors.txt)
        language: en
        ant: antProperties()

      </data>
      <borders>
        <![CDATA[border('<#include "/header.ftl"/>', '<#include "/footer.ftl"/>', **/*.html)]]>
      </borders>
      <include name="**/*" />
      <exclude name="**/*.ftl" />
      <exclude name="**/tech-doc/**" />
    </fmpp>
    <copy todir="${temp}/${restlet-com}/tech-doc/">
      <fileset dir="${temp}/owr/tech-doc" />
    </copy>
    <delete dir="${temp}/owr" />
  </target>

  <target name="generate-javadocs" if="do-javadoc" description="Generate the Javadocs.">
    <delete dir="${javadocs}" verbose="false" quiet="true" includeEmptyDirs="true" />

    <javadoc packagenames="com.restlet.*" sourcepath="${src}" destdir="${javadocs}" classpathref="main.path" author="true" version="true" use="true" windowtitle="Restlet Web server ${version-full}" doctitle="Restlet Web server ${version-full}" overview="${tmpl}/javadocs/overview.html" stylesheetfile="${tmpl}/javadocs/stylesheet.css" verbose="false">
      <bottom><![CDATA[<i>Copyright &#169; 2005-${current-year} Restlet. All Rights Reserved.</i>]]></bottom>
      <tag name="associates" scope="all" description="Design stereotype: " enabled="false" />
      <tag name="clientCardinality" scope="all" description="Design stereotype: " enabled="false" />
      <tag name="label" scope="all" description="Design stereotype: " enabled="false" />
      <tag name="stereotype" scope="all" description="Design stereotype: " enabled="false" />
      <tag name="supplierCardinality" scope="all" description="Design stereotype: " enabled="false" />

      <link href="http://docs.oracle.com/javase/6/docs/api/" />
      <link href="http://restlet.com/documentation/${testing.restlet-version-minor}/api/" />
    </javadoc>
  </target>

  <!-- VERIFY target -->
  <target name="verify" description="Verify build." />

  <!-- INTEGRATE target -->
  <target name="integrate" if="do-integrate" description="Dependencies with other projects." />

  <!-- STAGE target -->
  <target name="stage" description="Stage the packaging step.">
    <mkdir dir="${dist}/${dist-path}/config" />
    <mkdir dir="${dist}/${dist-path}/bin" />
    <mkdir dir="${dist}/${dist-path}/lib" />
    <mkdir dir="${dist}/${dist-path}/${restlet-com}" />

    <!-- Put everything in ${classes} into the JAR file -->
    <jar jarfile="${dist}/${dist-path}/lib/com.restlet.frontend.jar" basedir="${classes}" includes="com/restlet/frontend/**" />

    <!-- Copy the Web directories -->
    <copy todir="${dist}/${dist-path}/${restlet-com}">
      <fileset dir="${temp}/${restlet-com}" />
    </copy>
    <!-- Copy the config file -->
    <copy todir="${dist}/${dist-path}/config">
      <fileset dir="${config}" excludes="**/.svn,**/Thumbs.db" />
      <fileset dir="${src}/config" excludes="**/.svn,**/Thumbs.db" />
    </copy>
    <copy todir="${dist}/${dist-path}/bin">
      <fileset dir="${bin}" excludes="**/.svn,**/Thumbs.db, conf/" />
    </copy>
    <chmod file="${dist}/${dist-path}/bin/linux/wrapper" perm="ug+x" />

    <!-- Copy the librairies file -->
    <copy todir="${dist}/${dist-path}/lib" flatten="true">
      <fileset dir="../librairies">
        <include name="**/*.jar" />
        <exclude name="*tanuki*/**" />
      </fileset>
    </copy>
    <copy todir="${dist}/${dist-path}/lib/wrapper" flatten="true">
      <fileset dir="../librairies">
        <include name="*tanuki*/*wrapper*" />
      </fileset>
    </copy>
  </target>

  <!-- PACKAGE target -->
  <target name="package" if="do-package" description="Generate the distribution.">
    <zip destfile="${dist}/${dist-path}.zip" basedir="${dist}" includes="${dist-path}/**/*" />
  </target>

  <target name="package-client-doc" depends="package-client-help-release,package-client-help-snapshot,package-client-tips-release,package-client-tips-snapshot" description="Package the Restlet Client docs">
  </target>

  <target name="generate-client-help" description="Generate the Restlet Client help artefact">
    <delete dir="${temp}/client-help" />
    <mkdir dir="${temp}/client-help" />
    <delete dir="${temp}/client-help-md" />
    <mkdir dir="${temp}/client-help-md" />
    <exec executable="python" output="${temp}/client-help/index.json">
      <arg value="tools/generate-toc.py" />
      <arg value="--path" />
      <arg value="${mods}/com.restlet/tech-doc/client/guide" />
      <arg value="--clientjsonindex" />
    </exec>
    <exec executable="python">
      <arg value="tools/generate-toc.py" />
      <arg value="--path" />
      <arg value="${mods}/com.restlet/tech-doc/client/guide" />
      <arg value="--clientfiles" />
      <arg value="${temp}/client-help-md" />
    </exec>
    <java jar="${tools}/txtmark-wrapped/txtmark-wrapped.jar" fork="true">
      <arg value="${temp}/client-help-md" />
      <arg value="${temp}/client-help" />
    </java>
  </target>

  <target name="package-client-help-snapshot" if="do-client-snapshot" depends="generate-client-help" description="Package the Restlet Client help artefact">
    <jar destfile="${dist}/client-help/client-help.jar" basedir="${temp}/client-help" />
    <exec executable="mvn">
      <arg value="deploy:deploy-file" />
      <arg value="-DgroupId=com.restlet.client" />
      <arg value="-DartifactId=client-help" />
      <arg value="-Dversion=1.0.0-SNAPSHOT" />
      <arg value="-DgeneratePom=true" />
      <arg value="-Dpackaging=jar" />
      <arg value="-DrepositoryId=nexus-snapshots" />
      <arg value="-Durl=https://nexus.rest-let.com/nexus/content/repositories/snapshots/" />
      <arg value="-Dfile=${dist}/client-help/client-help.jar" />
    </exec>
  </target>

  <target name="package-client-help-release" if="do-client-release" depends="generate-client-help" description="Package the Restlet Client help artefact">
    <jar destfile="${dist}/client-help/client-help.jar" basedir="${temp}/client-help" />
    <exec executable="mvn">
      <arg value="deploy:deploy-file" />
      <arg value="-DgroupId=com.restlet.client" />
      <arg value="-DartifactId=client-help" />
      <arg value="-Dversion=${client-doc-version}" />
      <arg value="-DgeneratePom=true" />
      <arg value="-Dpackaging=jar" />
      <arg value="-DrepositoryId=nexus-releases" />
      <arg value="-Durl=https://nexus.rest-let.com/nexus/content/repositories/releases/" />
      <arg value="-Dfile=${dist}/client-help/client-help.jar" />
    </exec>
  </target>

  <target name="generate-client-tips" description="Generate the Restlet Client tips artefact">
    <delete dir="${temp}/client-tips" />
    <mkdir dir="${temp}/client-tips" />
    <copy todir="${temp}/client-tips-md">
      <fileset dir="${mods}/com.restlet/tech-doc/client/tips"/>
    </copy>
    <java jar="${tools}/txtmark-wrapped/txtmark-wrapped.jar" fork="true">
      <arg value="${temp}/client-tips-md" />
      <arg value="${temp}/client-tips" />
    </java>
    <exec executable="python" output="${temp}/client-tips/tips.json">
      <arg value="tools/generate-tips.py" />
      <arg value="--path" />
      <arg value="${temp}/client-tips" />
    </exec>
  </target>

  <target name="package-client-tips-snapshot" if="do-client-snapshot" depends="generate-client-tips" description="Package the Restlet Client tips artefact">
    <exec executable="mvn">
      <arg value="deploy:deploy-file" />
      <arg value="-DgroupId=com.restlet.client" />
      <arg value="-DartifactId=client-tips" />
      <arg value="-Dversion=1.0.0-SNAPSHOT" />
      <arg value="-DgeneratePom=true" />
      <arg value="-Dpackaging=json" />
      <arg value="-DrepositoryId=nexus-snapshots" />
      <arg value="-Durl=https://nexus.rest-let.com/nexus/content/repositories/snapshots/" />
      <arg value="-Dfile=${temp}/client-tips/tips.json" />
    </exec>
  </target>

  <target name="package-client-tips-release" if="do-client-release" depends="generate-client-tips" description="Package the Restlet Client tips artefact">
    <exec executable="mvn">
      <arg value="deploy:deploy-file" />
      <arg value="-DgroupId=com.restlet.client" />
      <arg value="-DartifactId=client-tips" />
      <arg value="-Dversion=${client-doc-version}" />
      <arg value="-DgeneratePom=true" />
      <arg value="-Dpackaging=json" />
      <arg value="-DrepositoryId=nexus-releases" />
      <arg value="-Durl=https://nexus.rest-let.com/nexus/content/repositories/releases/" />
      <arg value="-Dfile=${temp}/client-tips/tips.json" />
    </exec>
  </target>

</project>
